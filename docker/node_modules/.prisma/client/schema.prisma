generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../prisma/@generated/prisma-nestjs-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(uuid())
  name                 String?
  userPhoto            String?          @map("user_photo")
  phoneNumber          String?          @unique @map("phone_number")
  countryCode          CountryCode?     @map("country_code")
  documentId           String?          @map("document_id")
  url                  String?
  email                String?
  pin                  String?
  deviceToken          String?          @map("device_token")
  createdAt            DateTime         @default(now()) @map("created_at")
  verified             Boolean          @default(false)
  expoPushToken        String?          @map("expo_push_token")
  inviterId            String?          @map("inviter_id")
  faceIdImage          String?          @map("face_id_image")
  documentCountry      CountryCode?     @map("document_country")
  documentData         Json?            @map("document_data")
  documentFirstName    String?          @map("document_first_name")
  documentLastName     String?          @map("document_last_name")
  documentImage        String?          @map("document_image")
  documentGender       GenderEnum?      @map("document_gender")
  documentDateOfBirth  DateTime?        @map("document_date_of_birth")
  documentDateOfIssue  DateTime?        @map("document_date_of_issue")
  documentSerialNumber String?          @map("document_serial_number")
  documentCreatedAt    DateTime?        @map("document_created_at")
  activity             Activity[]
  answers              Answer[]
  creditsAffilate      Credit[]         @relation("affiliateCreditDetails")
  credits              Credit[]
  installment          Installment[]
  login                Login[]
  ordersAffiliate      Order[]          @relation("affiliateDetails")
  orders               Order[]          @relation("userDetails")
  otherMemberKYC       OtherMemberKYC[]
  product              Product[]        @relation("productAffiliate")
  settlement           Settlement[]     @relation("settlementUser")
  usersWallets         UsersWallets[]
  verify               Verify[]
  visit                Visit[]
  wallets              Wallet[]
  Settlement           Settlement[]
  creditRequests       CreditRequest?

  @@map("user")
}

model UsersWallets {
  userId   String     @map("user_id")
  walletId String     @map("wallet_id")
  role     WalletRole @default(USER)
  user     User       @relation(fields: [userId], references: [id])
  wallet   Wallet     @relation(fields: [walletId], references: [account])

  @@id([walletId, userId])
  @@map("user_wallets")
}

model Customer {
  customerId String @map("customer_id")
  vendorId   String @map("vendor_id")
  customer   Wallet @relation("customer", fields: [customerId], references: [account])
  vendor     Wallet @relation("vendorCustomer", fields: [vendorId], references: [account])

  @@id([customerId, vendorId])
  @@map("customer")
}

model Supplier {
  supplierId String @map("supplier_id")
  vendorId   String @map("vendor_id")
  supplier   Wallet @relation("supplier", fields: [supplierId], references: [account])
  vendor     Wallet @relation("vendorSupplier", fields: [vendorId], references: [account])

  @@id([supplierId, vendorId])
  @@map("supplier")
}

model Badge {
  id        String     @id @default(uuid())
  account   String
  active    Boolean?   @default(false)
  createdAt DateTime?  @default(now()) @map("created_at")
  type      BadgeType? @map("badge_type")
  count     Int?       @default(1)
  level     Int?       @default(1)
  wallet    Wallet     @relation("walletBadges", fields: [account], references: [account])

  @@map("badge")
}

model Blacklist {
  id          String    @id @default(uuid())
  taxId       String?   @map("tax_id")
  documentId  String?   @map("document_id")
  phoneNumber String?   @map("phone_number")
  createdAt   DateTime? @default(now()) @map("created_at")

  @@map("blacklist")
}

model Wallet {
  id                    String                @unique @default(uuid())
  name                  String?
  category              String?
  type                  WalletTypesEnum
  balance               Float                 @default(0)
  account               String                @id @unique
  createdAt             DateTime              @default(now()) @map("created_at")
  currency              CurrencyEnum?
  settlementAutomatic   Boolean?              @default(false) @map("settlement_automatic")
  settlementDefaultId   String?               @unique @map("settlement_default_id")
  verificationStartedAt DateTime?             @map("verification_started_at")
  shippingId            String?               @map("shipping_id")
  picture               String?
  settlementDefault     Settlement?           @relation(fields: [settlementDefaultId], references: [id])
  answers               Answer[]
  badges                Badge[]               @relation("walletBadges")
  billing               Billing[]
  creditorCredit        Credit[]              @relation("creditorCreditsDetails")
  debtorCredit          Credit[]              @relation("debtorCreditsDetails")
  creditConfigurations  CreditConfiguration[]
  customer              Customer[]            @relation("customer")
  vendor                Customer[]            @relation("vendorCustomer")
  creditorInstallments  Installment[]         @relation("creditorInstallmentDetails")
  debtorInstallments    Installment[]         @relation("debtorInstallmentDetails")
  metaData              MetaData?
  order                 Order[]
  orders                Order[]               @relation("vendorDetails")
  product               Product[]
  settings              Settings?             @relation("walletSettings")
  settlement            Settlement[]          @relation("settlementWallet")
  shipping              Shipping[]
  supplier              Supplier[]            @relation("supplier")
  vendorSupplier        Supplier[]            @relation("vendorSupplier")
  transaction           Transaction[]
  usersWallets          UsersWallets[]
  visit                 Visit[]
  users                 User[]
  trust                 Trust?

  @@map("wallet")
}

model Trust {
  account     String   @unique
  trustRating Float? // set by human estimation
  score       Float? // computer genernated score
  createdAt   DateTime @default(now()) @map("created_at")
  Wallet      Wallet?  @relation(fields: [account], references: [account])

  @@map("trust")
}

model MetaData {
  walletAccount       String           @id @map("wallet_account")
  CRB                 Json?
  taxId               String?          @map("tax_id")
  taxName             String?          @map("tax_name")
  seller              Boolean?         @default(false)
  sellerPhase         phaseEnum?       @default(GET_BADGES) @map("seller_phase")
  buyerPhase          phaseEnum?       @default(GET_BADGES) @map("buyer_phase") // combination of seller and buyers phase
  partnerRole         partnerRoleEnum? @map("partner_role")
  documentCOI         String?          @map("document_coi")
  documentCR12        String?          @map("document_cr12")
  documentSCF         String?          @map("document_scf")
  documentSCA         String?          @map("document_sca")
  documentStore       String?          @map("document_store")
  documentKRAcert     String?          @map("document_kra_cert")
  legalStatus         legalStatusEnum? @map("legal_status")
  metaBaseURL         Json?            @map("metabase_url")
  buyer               Boolean?         @default(false)
  maxBuyerOrderAmount Float?           @default(15000) @map("max_buyer_order_amount")
  wallet              Wallet           @relation(fields: [walletAccount], references: [account])

  @@map("meta_data")
}

model Transaction {
  id              String                 @id @default(uuid())
  amount          Float
  fee             Float
  totalAmount     Float                  @map("total_amount")
  description     String?
  paymentType     PaymentTypesEnum       @map("payment_type")
  paymentTypeId   String?                @map("payment_type_id")
  currency        CurrencyEnum           @default(KES)
  transactionType TransactionTypeEnum?   @map("transaction_type")
  method          TransactionMethodEnum?
  walletId        String?                @map("wallet_id")
  createdAt       DateTime               @default(now()) @map("created_at")
  name            String?
  balanceAfter    Float?                 @map("balance_after")
  balanceBefore   Float?                 @map("balance_before")
  wallet          Wallet?                @relation(fields: [walletId], references: [account])

  @@map("transaction")
}

model Product {
  id                String                 @id @default(uuid())
  vendorId          String?                @map("vendor_id")
  quantity          Int?                   @default(0)
  vendorName        String?                @map("vendor_name")
  vendorType        String?                @map("vendor_type")
  name              String?
  price             Float?
  unitPrice         Float?                 @map("unit_price")
  listedPublic      Boolean?               @default(true) @map("listed_public")
  description       String?
  gallery           Json?
  categories        Json?
  createdAt         DateTime               @default(now()) @map("created_at")
  currency          CurrencyEnum?
  ecommercePlatform EcommercePlatformEnum? @map("ecommerce_platform")
  platformId        String?                @map("platform_id")
  affiliateId       String?                @map("affiliate_id")
  affiliate         User?                  @relation("productAffiliate", fields: [affiliateId], references: [id])
  vendorWallet      Wallet?                @relation(fields: [vendorId], references: [account])

  @@map("product")
}

model Order {
  id                String                   @id @default(uuid())
  userId            String?                  @map("user_id")
  vendorId          String?                  @map("vendor_id")
  status            OrderStatusEnum?
  notes             String?
  name              String?
  phoneNumber       String?                  @map("phone_number")
  affiliateId       String?                  @map("affiliate_id")
  products          Json?
  items             Json?
  deliveryCode      String?                  @map("delivery_code")
  createdAt         DateTime                 @default(now()) @map("created_at")
  paymentStatus     PaymentStatusEnum        @default(PENDING) @map("payment_status")
  amount            Float
  paymentMethod     OrderPaymentMethodsEnum? @map("payment_method")
  billingId         String?
  shippingId        String?
  ecommercePlatform EcommercePlatformEnum?   @map("ecommerce_platform")
  currency          CurrencyEnum?
  platformId        String?                  @map("platform_id")
  customerId        String?                  @map("customer_id")
  referenceNumber   String?                  @map("reference_number")
  affiliate         User?                    @relation("affiliateDetails", fields: [affiliateId], references: [id])
  billing           Billing?                 @relation(fields: [billingId], references: [id])
  customer          Wallet?                  @relation(fields: [customerId], references: [account])
  shipping          Shipping?                @relation(fields: [shippingId], references: [id])
  user              User?                    @relation("userDetails", fields: [userId], references: [id])
  vendorWallet      Wallet?                  @relation("vendorDetails", fields: [vendorId], references: [account])
  credit            Credit?
  installments      Installment[]
  creditRequest     CreditRequest?

  @@map("order")
}

model Billing {
  id          String  @id @default(uuid())
  firstName   String? @map("first_name")
  lastName    String? @map("last_name")
  company     String?
  address1    String? @map("address_1")
  address2    String? @map("address_2")
  city        String?
  state       String?
  postcode    String?
  country     String?
  email       String?
  phoneNumber String? @map("phone_number")
  walletId    String? @map("wallet_id")
  wallet      Wallet? @relation(fields: [walletId], references: [account])
  order       Order[]

  @@map("billing")
}

model BuyerContacts {
  id          String   @id @default(uuid())
  walletId    String   @map("wallet_id")
  name        String   @map("name")
  phoneNumber String   @map("phone_number")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("buyer_contacts")
}

model Shipping {
  id           String            @id @default(uuid())
  firstName    String?           @map("first_name")
  lastName     String?           @map("last_name")
  company      String?
  address1     String?           @map("address_1")
  address2     String?           @map("address_2")
  city         String?
  state        String?
  postcode     String?
  country      String?
  email        String?
  longitude    String?
  shippingType ShippingTypeEnum? @map("shipping_type")
  shippingFee  Float?            @map("shipping_fee")
  latitude     String?
  phoneNumber  String?           @map("phone_number")
  walletId     String?           @map("wallet_id")
  isDefault    Boolean?          @map("is_default")
  seviVerified Boolean?          @map("sevi_verified")
  createdAt    DateTime?         @default(now()) @map("created_at")
  wallet       Wallet?           @relation(fields: [walletId], references: [account])
  Order        Order[]

  @@map("shipping")
}

model Credit {
  id                         String              @id @default(uuid())
  typeId                     String?             @map("type_id")
  currency                   CurrencyEnum?
  orderId                    String?             @unique @map("order_id")
  type                       creditRefType?
  amount                     Float?
  debtorId                   String?             @map("debtor_id")
  creditorId                 String?             @map("creditor_id")
  installmentsCount          Int?                @map("installment_count")
  installmentsCountPaid      Int?                @map("installment_count_paid")
  status                     creditStatusEnum?
  description                String?
  totalPaid                  Float?              @map("total_paid")
  totalToPay                 Float?              @map("total_to_pay")
  agreedDate                 DateTime?           @map("agreed_date")
  userId                     String?             @map("user_id")
  createdAt                  DateTime            @default(now()) @map("created_at")
  referenceNumber            String              @unique @map("reference_number")
  creditConfigurationId      String              @map("credit_configuration_id")
  endDate                    DateTime?           @map("end_date")
  paidAt                     DateTime?           @map("paid_at")
  duration                   Int?
  durationSlices             SlicesEnum          @map("duration_slices")
  affiliateId                String?             @map("affiliate_id")
  defaultAt                  DateTime?           @map("default_at")
  fundUpfrontAmount          Float?              @default(0) @map("fund_upfront_amount")
  orderWalletId              String?             @map("order_wallet_id")
  fundFeesAmount             Float?              @default(0) @map("fund_fees_amount")
  amountWithFees             Float?              @map("amount_with_fees")
  seviFeesAmount             Float?              @map("sevi_fees_amount")
  orderWalletShareFeesAmount Float?              @default(0) @map("order_wallet_share_fees_amount")
  fundPostDeliveryAmount     Float?              @default(0) @map("fund_post_delivery_amount`")
  affiliate                  User?               @relation("affiliateCreditDetails", fields: [affiliateId], references: [id])
  creditConfiguration        CreditConfiguration @relation(fields: [creditConfigurationId], references: [id])
  creditor                   Wallet?             @relation("creditorCreditsDetails", fields: [creditorId], references: [account])
  debtor                     Wallet?             @relation("debtorCreditsDetails", fields: [debtorId], references: [account])
  order                      Order?              @relation(fields: [orderId], references: [id])
  user                       User?               @relation(fields: [userId], references: [id])
  installments               Installment[]

  @@map("credit")
}

model Installment {
  id                    String                     @id @default(uuid())
  installmentCount      Int?                       @map("installment_count")
  startDate             DateTime?                  @map("start_date")
  endDate               DateTime?                  @map("end_date")
  referenceNumber       String?                    @map("referance_number")
  amount                Float
  paidAmount            Float                      @default(0) @map("paid_amount")
  debtorId              String?                    @map("debtor_id")
  creditorId            String?                    @map("creditor_id")
  orderId               String?                    @map("order_id")
  status                installmentStatusTypeEnum?
  firstTryFailedAt      DateTime?                  @map("first_try_failed_at")
  creditId              String?                    @map("credit_id")
  createdAt             DateTime                   @default(now()) @map("created_at")
  userId                String?                    @map("user_id")
  amountWithPenalty     Float                      @map("amount_with_penalty")
  seviFees              Float                      @map("sevi_fees")
  penalty               Float                      @default(0)
  paidAt                DateTime?                  @map("paid_at")
  creditConfigurationId String                     @map("credit_configuration_id")
  affiliateFees         Float                      @map("affiliate_fees")
  currency              CurrencyEnum?
  creditConfiguration   CreditConfiguration        @relation(fields: [creditConfigurationId], references: [id])
  credit                Credit?                    @relation(fields: [creditId], references: [id])
  creditor              Wallet?                    @relation("creditorInstallmentDetails", fields: [creditorId], references: [account])
  debtor                Wallet?                    @relation("debtorInstallmentDetails", fields: [debtorId], references: [account])
  order                 Order?                     @relation(fields: [orderId], references: [id])
  user                  User?                      @relation(fields: [userId], references: [id])

  @@map("installment")
}

model Activity {
  id          String              @id @default(uuid())
  entityId    String?             @map("entity_id")
  entityType  ActivityEntityType? @map("entity_type")
  priority    ActivityPriority?
  phoneNumber String?             @map("phone_number")
  message     Json?
  isRead      Boolean?            @default(false) @map("is_read")
  createdAt   DateTime            @default(now()) @map("created_at")
  entity      Json?
  userId      String?             @map("user_id")
  user        User?               @relation(fields: [userId], references: [id])

  @@map("activity")
}

model Message {
  messageId             String       @map("message_id")
  installmentSlices     SlicesEnum[] @map("installment_slices") // only if installment has this slice, message is send
  SMS                   String?
  description           String?
  pushNotificationTitle String?      @map("push_notification_title")
  pushNotificationBody  String?      @map("push_notification_body")
  email                 String?
  language              language

  @@id([messageId, language])
  @@map("message")
}

model Verify {
  id                 String                   @id @default(uuid())
  UID                String?
  phoneNumber        String?                  @map("phone_number")
  countryCode        CountryCode?             @map("country_code")
  createdAt          DateTime?                @default(now()) @map("created_at")
  creditConfigId     String?
  OTP                String?
  email              String?
  userId             String?                  @map("user_id")
  orderPaymentMethod OrderPaymentMethodsEnum? @map("order_payment_method")
  user               User?                    @relation(fields: [userId], references: [id])

  @@map("verify")
}

model Login {
  id        String   @id @default(uuid())
  qrKey     String?
  jwt       String?
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User?    @relation(fields: [userId], references: [id])

  @@map("login")
}

model Visit {
  id                 String    @id @default(uuid())
  account            String
  createdAt          DateTime? @default(now()) @map("created_at")
  visitedBy          String?   @map("visited_by")
  visitedByReference String?   @map("visited_by_reference")
  whenVisitTookPlace DateTime? @map("when_visit_took_place")
  wallet             Wallet    @relation(fields: [account], references: [account])
  visited            User?     @relation(fields: [visitedBy], references: [id])

  @@map("visit")
}

model ReferenceNumber {
  id            String @id @default(uuid())
  prefix        String @unique
  lastReference Int?   @map("last_reference")
}

model Job {
  id        String    @id @default(uuid())
  status    JobStatus
  version   Int       @default(0)
  createdAt DateTime  @default(now()) @map("created_at")
  name      String    @unique

  @@map("jobs")
}

model CreditConfiguration {
  id                            String                        @id @default(uuid())
  name                          String
  shouldPayDeposit              Boolean?                      @default(false) @map("should_pay_deposit")
  depositPercentage             Float                         @default(0) @map("deposit_percentage")
  duration                      Int
  slices                        SlicesEnum
  seviFeesPercentage            Float                         @map("sevi_fees_percentage")
  daysToStartAfterDelivery      Int                           @default(0) @map("days_to_start_after_delivery")
  lateInstallmentFeesPercentage Float                         @map("late_installment_fees_percentage")
  affiliatePercentage           Float                         @map("affiliate_percentage")
  creditLateFeesPercentage      Float                         @map("credit_late_fees_percentage")
  creditLateDays                Float                         @map("credit_late_days")
  createdAt                     DateTime?                     @default(now()) @map("created_at")
  status                        CreditConfigurationStatus     @default(ACTIVE)
  numberOfAllowedCredits        Int                           @default(0) @map("number_of_allowed_credits")
  fundFeesPercentage            Float?                        @default(0) @map("fund_fees_percentage")
  fundId                        String                        @map("fund_id")
  wallet                        Wallet                        @relation(fields: [fundId], references: [account])
  credit                        Credit[]
  attachedWallets               CreditConfigurationsWallets[]
  Installment                   Installment[]
  creditRequests                CreditRequest?

  @@map("credit_configurations")
}

model CreditConfigurationsWallets {
  configurationId        String              @map("configuration_id")
  walletId               String              @map("wallet_id")
  upfrontPercentage      Float               @map("upfront_percentage")
  fundFeesPercentage     Float               @map("fund_fees_percentage")
  maxOrderAmount         Float               @map("max_order_amount")
  maxOutstandingCredit   Float               @map("max_outstanding_credit")
  shareFeesPercentage    Float               @default(0) @map("share_fees_percentage")
  postDeliveryPercentage Float               @default(0) @map("post_delivery_percentage")
  configuration          CreditConfiguration @relation(fields: [configurationId], references: [id])

  @@id([walletId, configurationId])
  @@map("credit_configurations_wallets")
}

model OtherMemberKYC {
  id                   String       @id @default(uuid())
  name                 String
  documentId           String       @map("document_id")
  documentCountry      CountryCode? @map("document_country")
  documentData         Json?        @map("document_data")
  documentFirstName    String?      @map("document_first_name")
  documentLastName     String?      @map("document_last_name")
  documentImage        String?      @map("document_image")
  documentGender       GenderEnum?  @map("document_gender")
  documentDateOfBirth  DateTime?    @map("document_date_of_birth")
  documentDateOfIssue  DateTime?    @map("document_date_of_issue")
  documentSerialNumber String?      @map("document_serial_number")
  documentCreatedAt    DateTime?    @map("document_created_at")
  profilePictureURL    String       @map("profile_picture_url")
  idCardURL            String       @map("id_card_url")
  createdAt            DateTime     @default(now()) @map("created_at")
  createdByUserId      String       @map("created_by_user_id")
  userIdToKYC          String       @map("user_Id_to_kyc")
  OTP                  String       @map("otp")
  createdBy            User         @relation(fields: [createdByUserId], references: [id])

  @@map("other_member_kyc")
}

model Settings {
  woocommerceUrl            String?  @map("woocommerce_url")
  woocommerceConsumerKey    String?  @map("woocommerce_consumer_key")
  woocommerceActive         Boolean? @map("woocommerce_active")
  woocommerceConsumerSecret String?  @map("woocommerce_consumer_secret")
  walletAccount             String   @id @map("wallet_account")
  wallet                    Wallet   @relation("walletSettings", fields: [walletAccount], references: [account])

  @@map("settings")
}

model Settlement {
  id                 String                @id @default(uuid())
  type               TransactionMethodEnum
  account            String
  bankAccount        String?               @map("bank_account")
  bankAccountName    String?               @map("bank_account_name")
  bankBranch         String?               @map("bank_branch")
  bankName           String?               @map("bank_name")
  phoneNumber        String?               @map("phone_number")
  tillNumber         String?               @map("till_number")
  paybillNumber      String?               @map("paybill_number")
  verified           Boolean?
  verifiedByUser     String?               @map("verified_by_user")
  createdAt          DateTime              @default(now()) @map("created_at")
  createdBy          String                @map("created_by")
  createdByAgent     Boolean               @map("created_by_agent")
  wallet             Wallet                @relation("settlementWallet", fields: [account], references: [account])
  settlementCreator  User                  @relation("settlementUser", fields: [createdBy], references: [id])
  settlementVerifier User?                 @relation(fields: [verifiedByUser], references: [id])
  Wallet             Wallet[]

  @@map("settlement")
}

model Question {
  id          String               @id @default(uuid())
  answersType answerTypeEnum       @map("answer_type")
  category    QuestionCategoryEnum
  question    String
  isActive    Boolean              @default(true) @map("is_active")
  description String?
  answers     Answer[]

  @@map("question")
}

model Answer {
  id                  String   @id @default(uuid())
  questionId          String   @map("question_id")
  createdAt           DateTime @default(now()) @map("created_at")
  answer              String
  answeredBy          String?  @map("answered_by")
  answeredByReference String?  @map("answered_by_reference")
  account             String
  wallet              Wallet   @relation(fields: [account], references: [account])
  answered            User?    @relation(fields: [answeredBy], references: [id])
  question            Question @relation(fields: [questionId], references: [id])

  @@map("answer")
}

enum legalStatusEnum {
  SOLE
  LTD
}

enum partnerRoleEnum {
  VERIFY
  SALES
  DEPT_COLLECTION
  DEVELOPER
  TEST
  REMOVED
  NON
}

enum phaseEnum {
  NON
  REJECTED // 7
  WAITING_LIST // 7
  GET_BADGES // 1 - starting phase 
  DOCUMENT_CHECKS // 2 - check if docs are ok
  LOCATION_VISIT // 4 - let someone make a visit
  LOCATION_VISIT_SCHEDULED // 5
  DUE_DILIGENCE // 3 - check all digital information
  MOVE_TO // 6 last step, move to last phase
  ACCEPTED // 7

  @@map("sellerPhaseEnum")
}

enum answerTypeEnum {
  boolean
  string
  scale7
  scale5
  number
  range
  selector
}

enum QuestionCategoryEnum {
  GENERAL
  SWOT
  VERIFY
  FINANCE
  OWNER
  DOCUMENT
  LOCATION_SELLER_VISIT
  LOCATION_BUYER_VISIT
}

enum GenderEnum {
  MALE
  FEMALE
}

enum ShippingTypeEnum {
  SEND
  PICKUP
}

enum BadgeType {
  TRUSTED_BUYER
  TRUSTED_SELLER
  COMPANY_PICTURE
  PERSONAL_REGISTRATION
  PERSONAL_SEVI_VERIFICATION_TEAM
  PERSONAL_EMAIL_VERIFIED
  PERSONAL_TAX_ID
  MEMBERSHIP_FIRST_MONTH
  MEMBERSHIP_YEAR
  FIRST_ORDER
  SHIPPING_LOCATION
  SETTLEMENT_KES_BANK
  SETTLEMENT_KES_MPESA
  SELLERS_DOCUMENTS_UPLOADED
  PERSONAL_SEVI_TEAM
  MPESA_STATEMENT
  BANK_STATEMENT
  BUYER_SHARED_CONTACTS
}

enum EcommercePlatformEnum {
  SEVI
  WOOCOMMERCE
  CUSTOM
}

enum CreditConfigurationStatus {
  ACTIVE
  INACTIVE
}

enum SlicesEnum {
  WEEKLY
  MONTHLY
  DAILY
}

enum JobStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum language {
  AF
  SQ
  AR
  HY
  EU
  BN
  BG
  CA
  KM
  ZH
  HR
  CS
  DA
  NL
  EN
  ET
  FJ
  FI
  FR
  KA
  DE
  EL
  GU
  HE
  HI
  HU
  IS
  ID
  GA
  IT
  JA
  JW
  KO
  LA
  LV
  LT
  MK
  MS
  ML
  MT
  MI
  MR
  MN
  NE
  NO
  FA
  PL
  PT
  PA
  QU
  RO
  RU
  SM
  SR
  SK
  SL
  ES
  SW
  SV
  TA
  TT
  TE
  TH
  BO
  TO
  TR
  UK
  UR
  UZ
  VI
  CY
  XH
}

enum CountryCode {
  AF
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  CV
  KH
  CM
  CA
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CD
  CG
  CK
  CR
  HR
  CU
  CW
  CY
  CZ
  CI
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KP
  KR
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  MK
  RO
  RU
  RW
  RE
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  SS
  ES
  LK
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  UM
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
  AX
}

enum WalletTypesEnum {
  PERSONAL
  COMPANY
  GROUP
  FUND
}

enum WalletRole {
  ADMIN
  USER
  AGENT
}

enum PaymentTypesEnum {
  CREDIT
  ORDER
  WALLET
  MPESA_EXPRESS_PAYMENT
  MONEY_REQUEST
}

enum CurrencyEnum {
  KES
  UGX
  AFN
  EUR
  ALL
  DZD
  USD
  AOA
  XCD
  ARS
  AMD
  AWG
  AUD
  AZN
  BSD
  BHD
  BDT
  BBD
  BYN
  BZD
  XOF
  BMD
  INR
  BTN
  BOB
  BOV
  BAM
  BWP
  NOK
  BRL
  BND
  BGN
  BIF
  CVE
  KHR
  XAF
  CAD
  KYD
  CLP
  CLF
  CNY
  COP
  COU
  KMF
  CDF
  NZD
  CRC
  HRK
  CUP
  CUC
  ANG
  CZK
  DKK
  DJF
  DOP
  EGP
  SVC
  ERN
  SZL
  ETB
  FKP
  FJD
  XPF
  GMD
  GEL
  GHS
  GIP
  GTQ
  GBP
  GNF
  GYD
  HTG
  HNL
  HKD
  HUF
  ISK
  IDR
  XDR
  IRR
  IQD
  ILS
  JMD
  JPY
  JOD
  KZT
  KPW
  KRW
  KWD
  KGS
  LAK
  LBP
  LSL
  ZAR
  LRD
  LYD
  CHF
  MOP
  MKD
  MGA
  MWK
  MYR
  MVR
  MRU
  MUR
  XUA
  MXN
  MXV
  MDL
  MNT
  MAD
  MZN
  MMK
  NAD
  NPR
  NIO
  NGN
  OMR
  PKR
  PAB
  PGK
  PYG
  PEN
  PHP
  PLN
  QAR
  RON
  RUB
  RWF
  SHP
  WST
  STN
  SAR
  RSD
  SCR
  SLL
  SGD
  XSU
  SBD
  SOS
  SSP
  LKR
  SDG
  SRD
  SEK
  CHE
  CHW
  SYP
  TWD
  TJS
  TZS
  THB
  TOP
  TTD
  TND
  TRY
  TMT
  UAH
  AED
  USN
  UYU
  UYI
  UYW
  UZS
  VUV
  VES
  VND
  YER
  ZMW
  ZWL
  XBA
  XBB
  XBC
  XBD
  XTS
  XXX
  XAU
  XPD
  XPT
  XAG
  AFA
  FIM
  ALK
  ADP
  ESP
  FRF
  AOK
  AON
  AOR
  ARA
  ARP
  ARY
  RUR
  ATS
  AYM
  AZM
  BYB
  BYR
  BEC
  BEF
  BEL
  BOP
  BAD
  BRB
  BRC
  BRE
  BRN
  BRR
  BGJ
  BGK
  BGL
  BUK
  HRD
  CYP
  CSJ
  CSK
  ECS
  ECV
  GQE
  EEK
  XEU
  GEK
  DDM
  DEM
  GHC
  GHP
  GRD
  GNE
  GNS
  GWE
  GWP
  ITL
  ISJ
  IEP
  ILP
  ILR
  LAJ
  LVL
  LVR
  LSM
  ZAL
  LTL
  LTT
  LUC
  LUF
  LUL
  MGF
  MVQ
  MLF
  MTL
  MTP
  MRO
  MXP
  MZE
  MZM
  NLG
  NIC
  PEH
  PEI
  PES
  PLZ
  PTE
  ROK
  ROL
  STD
  CSD
  SKK
  SIT
  RHD
  ESA
  ESB
  SDD
  SDP
  SRG
  CHC
  TJR
  TPE
  TRL
  TMM
  UGS
  UGW
  UAK
  SUR
  USS
  UYN
  UYP
  VEB
  VEF
  VNC
  YDD
  YUD
  YUM
  YUN
  ZRN
  ZRZ
  ZMK
  ZWC
  ZWD
  ZWN
  ZWR
  XFO
  XRE
  XFU
}

enum TransactionTypeEnum {
  TOP_UP
  DEDUCT
}

enum TransactionMethodEnum {
  SEVI
  MPESA_HOOK
  CREDIT
  MPESA
  LOAD
  BANK_KENYA
  BEYONIC_HOOK
  KES_BANK
  KES_MPESA_PAYBILL
  KES_MPESA_PHONENUMBER
  UGX_BANK
}

enum OrderStatusEnum {
  PENDING
  CANCELLED
  AWAITING_SHIPMENT
  SHIPPED
  DELIVERED
  REFUNDED
  DISPUTED
  RETURNED
  ARCHIVED
}

enum OrderPaymentMethodsEnum {
  SEVI_WALLET
  INSTALLMENTS
  CASH_ON_DELIVERY
  INSTALLMENTS_MPESA
}

enum PaymentStatusEnum {
  PAID
  PARTIALLY_PAID
  PENDING
  CREDIT_PROPOSAL_INITIATED
  REFUNDED
}

enum creditRefType {
  IOU1
  SHOP_ORDER
  P2P_LOAN1
}

enum creditStatusEnum {
  PENDING
  REQUESTED
  AGREED
  DEFAULTED
  PAID
  LATE
  LATE_PAID
  REFUNDED
  DEFAULTED_PAID
}

enum repaymentTermEnum {
  DAILY
  WEEKLY
  MONTHLY
  SINGLE
}

enum installmentStatusTypeEnum {
  PENDING
  LATE
  PAID
  DEFAULTED
  LATE_PAID
  PARTIALLY_PAID
}

enum ActivityEntityType {
  PRODUCT_PAIRING
  ORDER
  CREDIT
  INSTALLMENT
  UPLOADED_SELLER_DOCUMENTS
  GENERAL
  TRANSACTION
  BADGE
}

enum ActivityPriority {
  URGENT
  HIGH
  NORMAL
  LOW
}

enum CreditRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  FAILED
}

model CreditRequest {
  id                    String               @id @default(uuid())
  status                CreditRequestStatus  @default(PENDING)
  orderId               String               @unique @map("order_id")
  wallet                String
  creditConfigurationId String               @unique @map("credit_configuration_id")
  userId                String               @unique @map("user_id")
  user                  User?                @relation(fields: [userId], references: [id])
  order                 Order?               @relation(fields: [orderId], references: [id])
  creditConfiguration   CreditConfiguration? @relation(fields: [creditConfigurationId], references: [id])
  createdAt             DateTime             @default(now()) @map("created_at")
  proceedAt             DateTime             @map("proceed_at")

  @@unique([orderId, userId])
  @@map("credit_request")
}
