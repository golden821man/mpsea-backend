
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.10.0
 * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
 */
Prisma.prismaVersion = {
  client: "3.10.0",
  engine: "73e60b76d394f8d37d8ebd1f8918c79029f0db86"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  userPhoto: 'userPhoto',
  phoneNumber: 'phoneNumber',
  countryCode: 'countryCode',
  documentId: 'documentId',
  url: 'url',
  email: 'email',
  pin: 'pin',
  deviceToken: 'deviceToken',
  createdAt: 'createdAt',
  verified: 'verified',
  expoPushToken: 'expoPushToken',
  inviterId: 'inviterId',
  faceIdImage: 'faceIdImage',
  documentCountry: 'documentCountry',
  documentData: 'documentData',
  documentFirstName: 'documentFirstName',
  documentLastName: 'documentLastName',
  documentImage: 'documentImage',
  documentGender: 'documentGender',
  documentDateOfBirth: 'documentDateOfBirth',
  documentDateOfIssue: 'documentDateOfIssue',
  documentSerialNumber: 'documentSerialNumber',
  documentCreatedAt: 'documentCreatedAt'
});

exports.Prisma.UsersWalletsScalarFieldEnum = makeEnum({
  userId: 'userId',
  walletId: 'walletId',
  role: 'role'
});

exports.Prisma.CustomerScalarFieldEnum = makeEnum({
  customerId: 'customerId',
  vendorId: 'vendorId'
});

exports.Prisma.SupplierScalarFieldEnum = makeEnum({
  supplierId: 'supplierId',
  vendorId: 'vendorId'
});

exports.Prisma.BadgeScalarFieldEnum = makeEnum({
  id: 'id',
  account: 'account',
  active: 'active',
  createdAt: 'createdAt',
  type: 'type',
  count: 'count',
  level: 'level'
});

exports.Prisma.BlacklistScalarFieldEnum = makeEnum({
  id: 'id',
  taxId: 'taxId',
  documentId: 'documentId',
  phoneNumber: 'phoneNumber',
  createdAt: 'createdAt'
});

exports.Prisma.WalletScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  category: 'category',
  type: 'type',
  balance: 'balance',
  account: 'account',
  createdAt: 'createdAt',
  currency: 'currency',
  settlementAutomatic: 'settlementAutomatic',
  settlementDefaultId: 'settlementDefaultId',
  verificationStartedAt: 'verificationStartedAt',
  shippingId: 'shippingId',
  picture: 'picture'
});

exports.Prisma.TrustScalarFieldEnum = makeEnum({
  account: 'account',
  trustRating: 'trustRating',
  score: 'score',
  createdAt: 'createdAt'
});

exports.Prisma.MetaDataScalarFieldEnum = makeEnum({
  walletAccount: 'walletAccount',
  CRB: 'CRB',
  taxId: 'taxId',
  taxName: 'taxName',
  seller: 'seller',
  sellerPhase: 'sellerPhase',
  buyerPhase: 'buyerPhase',
  partnerRole: 'partnerRole',
  documentCOI: 'documentCOI',
  documentCR12: 'documentCR12',
  documentSCF: 'documentSCF',
  documentSCA: 'documentSCA',
  documentStore: 'documentStore',
  documentKRAcert: 'documentKRAcert',
  legalStatus: 'legalStatus',
  metaBaseURL: 'metaBaseURL',
  buyer: 'buyer',
  maxBuyerOrderAmount: 'maxBuyerOrderAmount'
});

exports.Prisma.TransactionScalarFieldEnum = makeEnum({
  id: 'id',
  amount: 'amount',
  fee: 'fee',
  totalAmount: 'totalAmount',
  description: 'description',
  paymentType: 'paymentType',
  paymentTypeId: 'paymentTypeId',
  currency: 'currency',
  transactionType: 'transactionType',
  method: 'method',
  walletId: 'walletId',
  createdAt: 'createdAt',
  name: 'name',
  balanceAfter: 'balanceAfter',
  balanceBefore: 'balanceBefore'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  vendorId: 'vendorId',
  quantity: 'quantity',
  vendorName: 'vendorName',
  vendorType: 'vendorType',
  name: 'name',
  price: 'price',
  unitPrice: 'unitPrice',
  listedPublic: 'listedPublic',
  description: 'description',
  gallery: 'gallery',
  categories: 'categories',
  createdAt: 'createdAt',
  currency: 'currency',
  ecommercePlatform: 'ecommercePlatform',
  platformId: 'platformId',
  affiliateId: 'affiliateId'
});

exports.Prisma.OrderScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  vendorId: 'vendorId',
  status: 'status',
  notes: 'notes',
  name: 'name',
  phoneNumber: 'phoneNumber',
  affiliateId: 'affiliateId',
  products: 'products',
  items: 'items',
  deliveryCode: 'deliveryCode',
  createdAt: 'createdAt',
  paymentStatus: 'paymentStatus',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  billingId: 'billingId',
  shippingId: 'shippingId',
  ecommercePlatform: 'ecommercePlatform',
  currency: 'currency',
  platformId: 'platformId',
  customerId: 'customerId',
  referenceNumber: 'referenceNumber'
});

exports.Prisma.BillingScalarFieldEnum = makeEnum({
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  company: 'company',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  country: 'country',
  email: 'email',
  phoneNumber: 'phoneNumber',
  walletId: 'walletId'
});

exports.Prisma.BuyerContactsScalarFieldEnum = makeEnum({
  id: 'id',
  walletId: 'walletId',
  name: 'name',
  phoneNumber: 'phoneNumber',
  createdAt: 'createdAt'
});

exports.Prisma.ShippingScalarFieldEnum = makeEnum({
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  company: 'company',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  country: 'country',
  email: 'email',
  longitude: 'longitude',
  shippingType: 'shippingType',
  shippingFee: 'shippingFee',
  latitude: 'latitude',
  phoneNumber: 'phoneNumber',
  walletId: 'walletId',
  isDefault: 'isDefault',
  seviVerified: 'seviVerified',
  createdAt: 'createdAt'
});

exports.Prisma.CreditScalarFieldEnum = makeEnum({
  id: 'id',
  typeId: 'typeId',
  currency: 'currency',
  orderId: 'orderId',
  type: 'type',
  amount: 'amount',
  debtorId: 'debtorId',
  creditorId: 'creditorId',
  installmentsCount: 'installmentsCount',
  installmentsCountPaid: 'installmentsCountPaid',
  status: 'status',
  description: 'description',
  totalPaid: 'totalPaid',
  totalToPay: 'totalToPay',
  agreedDate: 'agreedDate',
  userId: 'userId',
  createdAt: 'createdAt',
  referenceNumber: 'referenceNumber',
  creditConfigurationId: 'creditConfigurationId',
  endDate: 'endDate',
  paidAt: 'paidAt',
  duration: 'duration',
  durationSlices: 'durationSlices',
  affiliateId: 'affiliateId',
  defaultAt: 'defaultAt',
  fundUpfrontAmount: 'fundUpfrontAmount',
  orderWalletId: 'orderWalletId',
  fundFeesAmount: 'fundFeesAmount',
  amountWithFees: 'amountWithFees',
  seviFeesAmount: 'seviFeesAmount',
  orderWalletShareFeesAmount: 'orderWalletShareFeesAmount',
  fundPostDeliveryAmount: 'fundPostDeliveryAmount'
});

exports.Prisma.InstallmentScalarFieldEnum = makeEnum({
  id: 'id',
  installmentCount: 'installmentCount',
  startDate: 'startDate',
  endDate: 'endDate',
  referenceNumber: 'referenceNumber',
  amount: 'amount',
  paidAmount: 'paidAmount',
  debtorId: 'debtorId',
  creditorId: 'creditorId',
  orderId: 'orderId',
  status: 'status',
  firstTryFailedAt: 'firstTryFailedAt',
  creditId: 'creditId',
  createdAt: 'createdAt',
  userId: 'userId',
  amountWithPenalty: 'amountWithPenalty',
  seviFees: 'seviFees',
  penalty: 'penalty',
  paidAt: 'paidAt',
  creditConfigurationId: 'creditConfigurationId',
  affiliateFees: 'affiliateFees',
  currency: 'currency'
});

exports.Prisma.ActivityScalarFieldEnum = makeEnum({
  id: 'id',
  entityId: 'entityId',
  entityType: 'entityType',
  priority: 'priority',
  phoneNumber: 'phoneNumber',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt',
  entity: 'entity',
  userId: 'userId'
});

exports.Prisma.MessageScalarFieldEnum = makeEnum({
  messageId: 'messageId',
  installmentSlices: 'installmentSlices',
  SMS: 'SMS',
  description: 'description',
  pushNotificationTitle: 'pushNotificationTitle',
  pushNotificationBody: 'pushNotificationBody',
  email: 'email',
  language: 'language'
});

exports.Prisma.VerifyScalarFieldEnum = makeEnum({
  id: 'id',
  UID: 'UID',
  phoneNumber: 'phoneNumber',
  countryCode: 'countryCode',
  createdAt: 'createdAt',
  creditConfigId: 'creditConfigId',
  OTP: 'OTP',
  email: 'email',
  userId: 'userId',
  orderPaymentMethod: 'orderPaymentMethod'
});

exports.Prisma.LoginScalarFieldEnum = makeEnum({
  id: 'id',
  qrKey: 'qrKey',
  jwt: 'jwt',
  userId: 'userId',
  createdAt: 'createdAt'
});

exports.Prisma.VisitScalarFieldEnum = makeEnum({
  id: 'id',
  account: 'account',
  createdAt: 'createdAt',
  visitedBy: 'visitedBy',
  visitedByReference: 'visitedByReference',
  whenVisitTookPlace: 'whenVisitTookPlace'
});

exports.Prisma.ReferenceNumberScalarFieldEnum = makeEnum({
  id: 'id',
  prefix: 'prefix',
  lastReference: 'lastReference'
});

exports.Prisma.JobScalarFieldEnum = makeEnum({
  id: 'id',
  status: 'status',
  version: 'version',
  createdAt: 'createdAt',
  name: 'name'
});

exports.Prisma.CreditConfigurationScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  shouldPayDeposit: 'shouldPayDeposit',
  depositPercentage: 'depositPercentage',
  duration: 'duration',
  slices: 'slices',
  seviFeesPercentage: 'seviFeesPercentage',
  daysToStartAfterDelivery: 'daysToStartAfterDelivery',
  lateInstallmentFeesPercentage: 'lateInstallmentFeesPercentage',
  affiliatePercentage: 'affiliatePercentage',
  creditLateFeesPercentage: 'creditLateFeesPercentage',
  creditLateDays: 'creditLateDays',
  createdAt: 'createdAt',
  status: 'status',
  numberOfAllowedCredits: 'numberOfAllowedCredits',
  fundFeesPercentage: 'fundFeesPercentage',
  fundId: 'fundId'
});

exports.Prisma.CreditConfigurationsWalletsScalarFieldEnum = makeEnum({
  configurationId: 'configurationId',
  walletId: 'walletId',
  upfrontPercentage: 'upfrontPercentage',
  fundFeesPercentage: 'fundFeesPercentage',
  maxOrderAmount: 'maxOrderAmount',
  maxOutstandingCredit: 'maxOutstandingCredit',
  shareFeesPercentage: 'shareFeesPercentage',
  postDeliveryPercentage: 'postDeliveryPercentage'
});

exports.Prisma.OtherMemberKYCScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  documentId: 'documentId',
  documentCountry: 'documentCountry',
  documentData: 'documentData',
  documentFirstName: 'documentFirstName',
  documentLastName: 'documentLastName',
  documentImage: 'documentImage',
  documentGender: 'documentGender',
  documentDateOfBirth: 'documentDateOfBirth',
  documentDateOfIssue: 'documentDateOfIssue',
  documentSerialNumber: 'documentSerialNumber',
  documentCreatedAt: 'documentCreatedAt',
  profilePictureURL: 'profilePictureURL',
  idCardURL: 'idCardURL',
  createdAt: 'createdAt',
  createdByUserId: 'createdByUserId',
  userIdToKYC: 'userIdToKYC',
  OTP: 'OTP'
});

exports.Prisma.SettingsScalarFieldEnum = makeEnum({
  woocommerceUrl: 'woocommerceUrl',
  woocommerceConsumerKey: 'woocommerceConsumerKey',
  woocommerceActive: 'woocommerceActive',
  woocommerceConsumerSecret: 'woocommerceConsumerSecret',
  walletAccount: 'walletAccount'
});

exports.Prisma.SettlementScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  account: 'account',
  bankAccount: 'bankAccount',
  bankAccountName: 'bankAccountName',
  bankBranch: 'bankBranch',
  bankName: 'bankName',
  phoneNumber: 'phoneNumber',
  tillNumber: 'tillNumber',
  paybillNumber: 'paybillNumber',
  verified: 'verified',
  verifiedByUser: 'verifiedByUser',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByAgent: 'createdByAgent'
});

exports.Prisma.QuestionScalarFieldEnum = makeEnum({
  id: 'id',
  answersType: 'answersType',
  category: 'category',
  question: 'question',
  isActive: 'isActive',
  description: 'description'
});

exports.Prisma.AnswerScalarFieldEnum = makeEnum({
  id: 'id',
  questionId: 'questionId',
  createdAt: 'createdAt',
  answer: 'answer',
  answeredBy: 'answeredBy',
  answeredByReference: 'answeredByReference',
  account: 'account'
});

exports.Prisma.CreditRequestScalarFieldEnum = makeEnum({
  id: 'id',
  status: 'status',
  orderId: 'orderId',
  wallet: 'wallet',
  creditConfigurationId: 'creditConfigurationId',
  userId: 'userId',
  createdAt: 'createdAt',
  proceedAt: 'proceedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});
exports.CountryCode = makeEnum({
  AF: 'AF',
  AL: 'AL',
  DZ: 'DZ',
  AS: 'AS',
  AD: 'AD',
  AO: 'AO',
  AI: 'AI',
  AQ: 'AQ',
  AG: 'AG',
  AR: 'AR',
  AM: 'AM',
  AW: 'AW',
  AU: 'AU',
  AT: 'AT',
  AZ: 'AZ',
  BS: 'BS',
  BH: 'BH',
  BD: 'BD',
  BB: 'BB',
  BY: 'BY',
  BE: 'BE',
  BZ: 'BZ',
  BJ: 'BJ',
  BM: 'BM',
  BT: 'BT',
  BO: 'BO',
  BQ: 'BQ',
  BA: 'BA',
  BW: 'BW',
  BV: 'BV',
  BR: 'BR',
  IO: 'IO',
  BN: 'BN',
  BG: 'BG',
  BF: 'BF',
  BI: 'BI',
  CV: 'CV',
  KH: 'KH',
  CM: 'CM',
  CA: 'CA',
  KY: 'KY',
  CF: 'CF',
  TD: 'TD',
  CL: 'CL',
  CN: 'CN',
  CX: 'CX',
  CC: 'CC',
  CO: 'CO',
  KM: 'KM',
  CD: 'CD',
  CG: 'CG',
  CK: 'CK',
  CR: 'CR',
  HR: 'HR',
  CU: 'CU',
  CW: 'CW',
  CY: 'CY',
  CZ: 'CZ',
  CI: 'CI',
  DK: 'DK',
  DJ: 'DJ',
  DM: 'DM',
  DO: 'DO',
  EC: 'EC',
  EG: 'EG',
  SV: 'SV',
  GQ: 'GQ',
  ER: 'ER',
  EE: 'EE',
  SZ: 'SZ',
  ET: 'ET',
  FK: 'FK',
  FO: 'FO',
  FJ: 'FJ',
  FI: 'FI',
  FR: 'FR',
  GF: 'GF',
  PF: 'PF',
  TF: 'TF',
  GA: 'GA',
  GM: 'GM',
  GE: 'GE',
  DE: 'DE',
  GH: 'GH',
  GI: 'GI',
  GR: 'GR',
  GL: 'GL',
  GD: 'GD',
  GP: 'GP',
  GU: 'GU',
  GT: 'GT',
  GG: 'GG',
  GN: 'GN',
  GW: 'GW',
  GY: 'GY',
  HT: 'HT',
  HM: 'HM',
  VA: 'VA',
  HN: 'HN',
  HK: 'HK',
  HU: 'HU',
  IS: 'IS',
  IN: 'IN',
  ID: 'ID',
  IR: 'IR',
  IQ: 'IQ',
  IE: 'IE',
  IM: 'IM',
  IL: 'IL',
  IT: 'IT',
  JM: 'JM',
  JP: 'JP',
  JE: 'JE',
  JO: 'JO',
  KZ: 'KZ',
  KE: 'KE',
  KI: 'KI',
  KP: 'KP',
  KR: 'KR',
  KW: 'KW',
  KG: 'KG',
  LA: 'LA',
  LV: 'LV',
  LB: 'LB',
  LS: 'LS',
  LR: 'LR',
  LY: 'LY',
  LI: 'LI',
  LT: 'LT',
  LU: 'LU',
  MO: 'MO',
  MG: 'MG',
  MW: 'MW',
  MY: 'MY',
  MV: 'MV',
  ML: 'ML',
  MT: 'MT',
  MH: 'MH',
  MQ: 'MQ',
  MR: 'MR',
  MU: 'MU',
  YT: 'YT',
  MX: 'MX',
  FM: 'FM',
  MD: 'MD',
  MC: 'MC',
  MN: 'MN',
  ME: 'ME',
  MS: 'MS',
  MA: 'MA',
  MZ: 'MZ',
  MM: 'MM',
  NA: 'NA',
  NR: 'NR',
  NP: 'NP',
  NL: 'NL',
  NC: 'NC',
  NZ: 'NZ',
  NI: 'NI',
  NE: 'NE',
  NG: 'NG',
  NU: 'NU',
  NF: 'NF',
  MP: 'MP',
  NO: 'NO',
  OM: 'OM',
  PK: 'PK',
  PW: 'PW',
  PS: 'PS',
  PA: 'PA',
  PG: 'PG',
  PY: 'PY',
  PE: 'PE',
  PH: 'PH',
  PN: 'PN',
  PL: 'PL',
  PT: 'PT',
  PR: 'PR',
  QA: 'QA',
  MK: 'MK',
  RO: 'RO',
  RU: 'RU',
  RW: 'RW',
  RE: 'RE',
  BL: 'BL',
  SH: 'SH',
  KN: 'KN',
  LC: 'LC',
  MF: 'MF',
  PM: 'PM',
  VC: 'VC',
  WS: 'WS',
  SM: 'SM',
  ST: 'ST',
  SA: 'SA',
  SN: 'SN',
  RS: 'RS',
  SC: 'SC',
  SL: 'SL',
  SG: 'SG',
  SX: 'SX',
  SK: 'SK',
  SI: 'SI',
  SB: 'SB',
  SO: 'SO',
  ZA: 'ZA',
  GS: 'GS',
  SS: 'SS',
  ES: 'ES',
  LK: 'LK',
  SD: 'SD',
  SR: 'SR',
  SJ: 'SJ',
  SE: 'SE',
  CH: 'CH',
  SY: 'SY',
  TW: 'TW',
  TJ: 'TJ',
  TZ: 'TZ',
  TH: 'TH',
  TL: 'TL',
  TG: 'TG',
  TK: 'TK',
  TO: 'TO',
  TT: 'TT',
  TN: 'TN',
  TR: 'TR',
  TM: 'TM',
  TC: 'TC',
  TV: 'TV',
  UG: 'UG',
  UA: 'UA',
  AE: 'AE',
  GB: 'GB',
  UM: 'UM',
  US: 'US',
  UY: 'UY',
  UZ: 'UZ',
  VU: 'VU',
  VE: 'VE',
  VN: 'VN',
  VG: 'VG',
  VI: 'VI',
  WF: 'WF',
  EH: 'EH',
  YE: 'YE',
  ZM: 'ZM',
  ZW: 'ZW',
  AX: 'AX'
});

exports.GenderEnum = makeEnum({
  MALE: 'MALE',
  FEMALE: 'FEMALE'
});

exports.WalletRole = makeEnum({
  ADMIN: 'ADMIN',
  USER: 'USER',
  AGENT: 'AGENT'
});

exports.BadgeType = makeEnum({
  TRUSTED_BUYER: 'TRUSTED_BUYER',
  TRUSTED_SELLER: 'TRUSTED_SELLER',
  COMPANY_PICTURE: 'COMPANY_PICTURE',
  PERSONAL_REGISTRATION: 'PERSONAL_REGISTRATION',
  PERSONAL_SEVI_VERIFICATION_TEAM: 'PERSONAL_SEVI_VERIFICATION_TEAM',
  PERSONAL_EMAIL_VERIFIED: 'PERSONAL_EMAIL_VERIFIED',
  PERSONAL_TAX_ID: 'PERSONAL_TAX_ID',
  MEMBERSHIP_FIRST_MONTH: 'MEMBERSHIP_FIRST_MONTH',
  MEMBERSHIP_YEAR: 'MEMBERSHIP_YEAR',
  FIRST_ORDER: 'FIRST_ORDER',
  SHIPPING_LOCATION: 'SHIPPING_LOCATION',
  SETTLEMENT_KES_BANK: 'SETTLEMENT_KES_BANK',
  SETTLEMENT_KES_MPESA: 'SETTLEMENT_KES_MPESA',
  SELLERS_DOCUMENTS_UPLOADED: 'SELLERS_DOCUMENTS_UPLOADED',
  PERSONAL_SEVI_TEAM: 'PERSONAL_SEVI_TEAM',
  MPESA_STATEMENT: 'MPESA_STATEMENT',
  BANK_STATEMENT: 'BANK_STATEMENT',
  BUYER_SHARED_CONTACTS: 'BUYER_SHARED_CONTACTS'
});

exports.WalletTypesEnum = makeEnum({
  PERSONAL: 'PERSONAL',
  COMPANY: 'COMPANY',
  GROUP: 'GROUP',
  FUND: 'FUND'
});

exports.CurrencyEnum = makeEnum({
  KES: 'KES',
  UGX: 'UGX',
  AFN: 'AFN',
  EUR: 'EUR',
  ALL: 'ALL',
  DZD: 'DZD',
  USD: 'USD',
  AOA: 'AOA',
  XCD: 'XCD',
  ARS: 'ARS',
  AMD: 'AMD',
  AWG: 'AWG',
  AUD: 'AUD',
  AZN: 'AZN',
  BSD: 'BSD',
  BHD: 'BHD',
  BDT: 'BDT',
  BBD: 'BBD',
  BYN: 'BYN',
  BZD: 'BZD',
  XOF: 'XOF',
  BMD: 'BMD',
  INR: 'INR',
  BTN: 'BTN',
  BOB: 'BOB',
  BOV: 'BOV',
  BAM: 'BAM',
  BWP: 'BWP',
  NOK: 'NOK',
  BRL: 'BRL',
  BND: 'BND',
  BGN: 'BGN',
  BIF: 'BIF',
  CVE: 'CVE',
  KHR: 'KHR',
  XAF: 'XAF',
  CAD: 'CAD',
  KYD: 'KYD',
  CLP: 'CLP',
  CLF: 'CLF',
  CNY: 'CNY',
  COP: 'COP',
  COU: 'COU',
  KMF: 'KMF',
  CDF: 'CDF',
  NZD: 'NZD',
  CRC: 'CRC',
  HRK: 'HRK',
  CUP: 'CUP',
  CUC: 'CUC',
  ANG: 'ANG',
  CZK: 'CZK',
  DKK: 'DKK',
  DJF: 'DJF',
  DOP: 'DOP',
  EGP: 'EGP',
  SVC: 'SVC',
  ERN: 'ERN',
  SZL: 'SZL',
  ETB: 'ETB',
  FKP: 'FKP',
  FJD: 'FJD',
  XPF: 'XPF',
  GMD: 'GMD',
  GEL: 'GEL',
  GHS: 'GHS',
  GIP: 'GIP',
  GTQ: 'GTQ',
  GBP: 'GBP',
  GNF: 'GNF',
  GYD: 'GYD',
  HTG: 'HTG',
  HNL: 'HNL',
  HKD: 'HKD',
  HUF: 'HUF',
  ISK: 'ISK',
  IDR: 'IDR',
  XDR: 'XDR',
  IRR: 'IRR',
  IQD: 'IQD',
  ILS: 'ILS',
  JMD: 'JMD',
  JPY: 'JPY',
  JOD: 'JOD',
  KZT: 'KZT',
  KPW: 'KPW',
  KRW: 'KRW',
  KWD: 'KWD',
  KGS: 'KGS',
  LAK: 'LAK',
  LBP: 'LBP',
  LSL: 'LSL',
  ZAR: 'ZAR',
  LRD: 'LRD',
  LYD: 'LYD',
  CHF: 'CHF',
  MOP: 'MOP',
  MKD: 'MKD',
  MGA: 'MGA',
  MWK: 'MWK',
  MYR: 'MYR',
  MVR: 'MVR',
  MRU: 'MRU',
  MUR: 'MUR',
  XUA: 'XUA',
  MXN: 'MXN',
  MXV: 'MXV',
  MDL: 'MDL',
  MNT: 'MNT',
  MAD: 'MAD',
  MZN: 'MZN',
  MMK: 'MMK',
  NAD: 'NAD',
  NPR: 'NPR',
  NIO: 'NIO',
  NGN: 'NGN',
  OMR: 'OMR',
  PKR: 'PKR',
  PAB: 'PAB',
  PGK: 'PGK',
  PYG: 'PYG',
  PEN: 'PEN',
  PHP: 'PHP',
  PLN: 'PLN',
  QAR: 'QAR',
  RON: 'RON',
  RUB: 'RUB',
  RWF: 'RWF',
  SHP: 'SHP',
  WST: 'WST',
  STN: 'STN',
  SAR: 'SAR',
  RSD: 'RSD',
  SCR: 'SCR',
  SLL: 'SLL',
  SGD: 'SGD',
  XSU: 'XSU',
  SBD: 'SBD',
  SOS: 'SOS',
  SSP: 'SSP',
  LKR: 'LKR',
  SDG: 'SDG',
  SRD: 'SRD',
  SEK: 'SEK',
  CHE: 'CHE',
  CHW: 'CHW',
  SYP: 'SYP',
  TWD: 'TWD',
  TJS: 'TJS',
  TZS: 'TZS',
  THB: 'THB',
  TOP: 'TOP',
  TTD: 'TTD',
  TND: 'TND',
  TRY: 'TRY',
  TMT: 'TMT',
  UAH: 'UAH',
  AED: 'AED',
  USN: 'USN',
  UYU: 'UYU',
  UYI: 'UYI',
  UYW: 'UYW',
  UZS: 'UZS',
  VUV: 'VUV',
  VES: 'VES',
  VND: 'VND',
  YER: 'YER',
  ZMW: 'ZMW',
  ZWL: 'ZWL',
  XBA: 'XBA',
  XBB: 'XBB',
  XBC: 'XBC',
  XBD: 'XBD',
  XTS: 'XTS',
  XXX: 'XXX',
  XAU: 'XAU',
  XPD: 'XPD',
  XPT: 'XPT',
  XAG: 'XAG',
  AFA: 'AFA',
  FIM: 'FIM',
  ALK: 'ALK',
  ADP: 'ADP',
  ESP: 'ESP',
  FRF: 'FRF',
  AOK: 'AOK',
  AON: 'AON',
  AOR: 'AOR',
  ARA: 'ARA',
  ARP: 'ARP',
  ARY: 'ARY',
  RUR: 'RUR',
  ATS: 'ATS',
  AYM: 'AYM',
  AZM: 'AZM',
  BYB: 'BYB',
  BYR: 'BYR',
  BEC: 'BEC',
  BEF: 'BEF',
  BEL: 'BEL',
  BOP: 'BOP',
  BAD: 'BAD',
  BRB: 'BRB',
  BRC: 'BRC',
  BRE: 'BRE',
  BRN: 'BRN',
  BRR: 'BRR',
  BGJ: 'BGJ',
  BGK: 'BGK',
  BGL: 'BGL',
  BUK: 'BUK',
  HRD: 'HRD',
  CYP: 'CYP',
  CSJ: 'CSJ',
  CSK: 'CSK',
  ECS: 'ECS',
  ECV: 'ECV',
  GQE: 'GQE',
  EEK: 'EEK',
  XEU: 'XEU',
  GEK: 'GEK',
  DDM: 'DDM',
  DEM: 'DEM',
  GHC: 'GHC',
  GHP: 'GHP',
  GRD: 'GRD',
  GNE: 'GNE',
  GNS: 'GNS',
  GWE: 'GWE',
  GWP: 'GWP',
  ITL: 'ITL',
  ISJ: 'ISJ',
  IEP: 'IEP',
  ILP: 'ILP',
  ILR: 'ILR',
  LAJ: 'LAJ',
  LVL: 'LVL',
  LVR: 'LVR',
  LSM: 'LSM',
  ZAL: 'ZAL',
  LTL: 'LTL',
  LTT: 'LTT',
  LUC: 'LUC',
  LUF: 'LUF',
  LUL: 'LUL',
  MGF: 'MGF',
  MVQ: 'MVQ',
  MLF: 'MLF',
  MTL: 'MTL',
  MTP: 'MTP',
  MRO: 'MRO',
  MXP: 'MXP',
  MZE: 'MZE',
  MZM: 'MZM',
  NLG: 'NLG',
  NIC: 'NIC',
  PEH: 'PEH',
  PEI: 'PEI',
  PES: 'PES',
  PLZ: 'PLZ',
  PTE: 'PTE',
  ROK: 'ROK',
  ROL: 'ROL',
  STD: 'STD',
  CSD: 'CSD',
  SKK: 'SKK',
  SIT: 'SIT',
  RHD: 'RHD',
  ESA: 'ESA',
  ESB: 'ESB',
  SDD: 'SDD',
  SDP: 'SDP',
  SRG: 'SRG',
  CHC: 'CHC',
  TJR: 'TJR',
  TPE: 'TPE',
  TRL: 'TRL',
  TMM: 'TMM',
  UGS: 'UGS',
  UGW: 'UGW',
  UAK: 'UAK',
  SUR: 'SUR',
  USS: 'USS',
  UYN: 'UYN',
  UYP: 'UYP',
  VEB: 'VEB',
  VEF: 'VEF',
  VNC: 'VNC',
  YDD: 'YDD',
  YUD: 'YUD',
  YUM: 'YUM',
  YUN: 'YUN',
  ZRN: 'ZRN',
  ZRZ: 'ZRZ',
  ZMK: 'ZMK',
  ZWC: 'ZWC',
  ZWD: 'ZWD',
  ZWN: 'ZWN',
  ZWR: 'ZWR',
  XFO: 'XFO',
  XRE: 'XRE',
  XFU: 'XFU'
});

exports.phaseEnum = makeEnum({
  NON: 'NON',
  REJECTED: 'REJECTED',
  WAITING_LIST: 'WAITING_LIST',
  GET_BADGES: 'GET_BADGES',
  DOCUMENT_CHECKS: 'DOCUMENT_CHECKS',
  LOCATION_VISIT: 'LOCATION_VISIT',
  LOCATION_VISIT_SCHEDULED: 'LOCATION_VISIT_SCHEDULED',
  DUE_DILIGENCE: 'DUE_DILIGENCE',
  MOVE_TO: 'MOVE_TO',
  ACCEPTED: 'ACCEPTED'
});

exports.partnerRoleEnum = makeEnum({
  VERIFY: 'VERIFY',
  SALES: 'SALES',
  DEPT_COLLECTION: 'DEPT_COLLECTION',
  DEVELOPER: 'DEVELOPER',
  TEST: 'TEST',
  REMOVED: 'REMOVED',
  NON: 'NON'
});

exports.legalStatusEnum = makeEnum({
  SOLE: 'SOLE',
  LTD: 'LTD'
});

exports.PaymentTypesEnum = makeEnum({
  CREDIT: 'CREDIT',
  ORDER: 'ORDER',
  WALLET: 'WALLET',
  MPESA_EXPRESS_PAYMENT: 'MPESA_EXPRESS_PAYMENT',
  MONEY_REQUEST: 'MONEY_REQUEST'
});

exports.TransactionTypeEnum = makeEnum({
  TOP_UP: 'TOP_UP',
  DEDUCT: 'DEDUCT'
});

exports.TransactionMethodEnum = makeEnum({
  SEVI: 'SEVI',
  MPESA_HOOK: 'MPESA_HOOK',
  CREDIT: 'CREDIT',
  MPESA: 'MPESA',
  LOAD: 'LOAD',
  BANK_KENYA: 'BANK_KENYA',
  BEYONIC_HOOK: 'BEYONIC_HOOK',
  KES_BANK: 'KES_BANK',
  KES_MPESA_PAYBILL: 'KES_MPESA_PAYBILL',
  KES_MPESA_PHONENUMBER: 'KES_MPESA_PHONENUMBER',
  UGX_BANK: 'UGX_BANK'
});

exports.EcommercePlatformEnum = makeEnum({
  SEVI: 'SEVI',
  WOOCOMMERCE: 'WOOCOMMERCE',
  CUSTOM: 'CUSTOM'
});

exports.OrderStatusEnum = makeEnum({
  PENDING: 'PENDING',
  CANCELLED: 'CANCELLED',
  AWAITING_SHIPMENT: 'AWAITING_SHIPMENT',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  REFUNDED: 'REFUNDED',
  DISPUTED: 'DISPUTED',
  RETURNED: 'RETURNED',
  ARCHIVED: 'ARCHIVED'
});

exports.PaymentStatusEnum = makeEnum({
  PAID: 'PAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  PENDING: 'PENDING',
  CREDIT_PROPOSAL_INITIATED: 'CREDIT_PROPOSAL_INITIATED',
  REFUNDED: 'REFUNDED'
});

exports.OrderPaymentMethodsEnum = makeEnum({
  SEVI_WALLET: 'SEVI_WALLET',
  INSTALLMENTS: 'INSTALLMENTS',
  CASH_ON_DELIVERY: 'CASH_ON_DELIVERY',
  INSTALLMENTS_MPESA: 'INSTALLMENTS_MPESA'
});

exports.ShippingTypeEnum = makeEnum({
  SEND: 'SEND',
  PICKUP: 'PICKUP'
});

exports.creditRefType = makeEnum({
  IOU1: 'IOU1',
  SHOP_ORDER: 'SHOP_ORDER',
  P2P_LOAN1: 'P2P_LOAN1'
});

exports.creditStatusEnum = makeEnum({
  PENDING: 'PENDING',
  REQUESTED: 'REQUESTED',
  AGREED: 'AGREED',
  DEFAULTED: 'DEFAULTED',
  PAID: 'PAID',
  LATE: 'LATE',
  LATE_PAID: 'LATE_PAID',
  REFUNDED: 'REFUNDED',
  DEFAULTED_PAID: 'DEFAULTED_PAID'
});

exports.SlicesEnum = makeEnum({
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  DAILY: 'DAILY'
});

exports.installmentStatusTypeEnum = makeEnum({
  PENDING: 'PENDING',
  LATE: 'LATE',
  PAID: 'PAID',
  DEFAULTED: 'DEFAULTED',
  LATE_PAID: 'LATE_PAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID'
});

exports.ActivityEntityType = makeEnum({
  PRODUCT_PAIRING: 'PRODUCT_PAIRING',
  ORDER: 'ORDER',
  CREDIT: 'CREDIT',
  INSTALLMENT: 'INSTALLMENT',
  UPLOADED_SELLER_DOCUMENTS: 'UPLOADED_SELLER_DOCUMENTS',
  GENERAL: 'GENERAL',
  TRANSACTION: 'TRANSACTION',
  BADGE: 'BADGE'
});

exports.ActivityPriority = makeEnum({
  URGENT: 'URGENT',
  HIGH: 'HIGH',
  NORMAL: 'NORMAL',
  LOW: 'LOW'
});

exports.language = makeEnum({
  AF: 'AF',
  SQ: 'SQ',
  AR: 'AR',
  HY: 'HY',
  EU: 'EU',
  BN: 'BN',
  BG: 'BG',
  CA: 'CA',
  KM: 'KM',
  ZH: 'ZH',
  HR: 'HR',
  CS: 'CS',
  DA: 'DA',
  NL: 'NL',
  EN: 'EN',
  ET: 'ET',
  FJ: 'FJ',
  FI: 'FI',
  FR: 'FR',
  KA: 'KA',
  DE: 'DE',
  EL: 'EL',
  GU: 'GU',
  HE: 'HE',
  HI: 'HI',
  HU: 'HU',
  IS: 'IS',
  ID: 'ID',
  GA: 'GA',
  IT: 'IT',
  JA: 'JA',
  JW: 'JW',
  KO: 'KO',
  LA: 'LA',
  LV: 'LV',
  LT: 'LT',
  MK: 'MK',
  MS: 'MS',
  ML: 'ML',
  MT: 'MT',
  MI: 'MI',
  MR: 'MR',
  MN: 'MN',
  NE: 'NE',
  NO: 'NO',
  FA: 'FA',
  PL: 'PL',
  PT: 'PT',
  PA: 'PA',
  QU: 'QU',
  RO: 'RO',
  RU: 'RU',
  SM: 'SM',
  SR: 'SR',
  SK: 'SK',
  SL: 'SL',
  ES: 'ES',
  SW: 'SW',
  SV: 'SV',
  TA: 'TA',
  TT: 'TT',
  TE: 'TE',
  TH: 'TH',
  BO: 'BO',
  TO: 'TO',
  TR: 'TR',
  UK: 'UK',
  UR: 'UR',
  UZ: 'UZ',
  VI: 'VI',
  CY: 'CY',
  XH: 'XH'
});

exports.JobStatus = makeEnum({
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
});

exports.CreditConfigurationStatus = makeEnum({
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
});

exports.answerTypeEnum = makeEnum({
  boolean: 'boolean',
  string: 'string',
  scale7: 'scale7',
  scale5: 'scale5',
  number: 'number',
  range: 'range',
  selector: 'selector'
});

exports.QuestionCategoryEnum = makeEnum({
  GENERAL: 'GENERAL',
  SWOT: 'SWOT',
  VERIFY: 'VERIFY',
  FINANCE: 'FINANCE',
  OWNER: 'OWNER',
  DOCUMENT: 'DOCUMENT',
  LOCATION_SELLER_VISIT: 'LOCATION_SELLER_VISIT',
  LOCATION_BUYER_VISIT: 'LOCATION_BUYER_VISIT'
});

exports.CreditRequestStatus = makeEnum({
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  FAILED: 'FAILED'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  UsersWallets: 'UsersWallets',
  Customer: 'Customer',
  Supplier: 'Supplier',
  Badge: 'Badge',
  Blacklist: 'Blacklist',
  Wallet: 'Wallet',
  Trust: 'Trust',
  MetaData: 'MetaData',
  Transaction: 'Transaction',
  Product: 'Product',
  Order: 'Order',
  Billing: 'Billing',
  BuyerContacts: 'BuyerContacts',
  Shipping: 'Shipping',
  Credit: 'Credit',
  Installment: 'Installment',
  Activity: 'Activity',
  Message: 'Message',
  Verify: 'Verify',
  Login: 'Login',
  Visit: 'Visit',
  ReferenceNumber: 'ReferenceNumber',
  Job: 'Job',
  CreditConfiguration: 'CreditConfiguration',
  CreditConfigurationsWallets: 'CreditConfigurationsWallets',
  OtherMemberKYC: 'OtherMemberKYC',
  Settings: 'Settings',
  Settlement: 'Settlement',
  Question: 'Question',
  Answer: 'Answer',
  CreditRequest: 'CreditRequest'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
